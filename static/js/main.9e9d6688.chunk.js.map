{"version":3,"sources":["logo.svg","TodoList/TodoList.tsx","Todo/Todo.ts","TaskInputField/TaskInputField.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TodoList","props","state","todos","done","renderedTodos","this","filter","todo","length","map","className","key","id","onClick","setState","changeTodo","icon","faCheckSquare","faSquare","label","role","aria-label","getTodos","React","Component","Todo","uuidv4","InputField","onSubmit","useForm","register","handleSubmit","reset","submitValue","formData","onBlur","name","ref","required","validate","value","trim","faPlusCircle","App","addTodo","text","console","log","src","logo","alt","superplaceholder","el","document","querySelector","sentences","options","letterDelay","sentenceDelay","shuffle","loop","start","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e9d6688.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './TodoList.scss';\r\nimport Todo from \"../Todo/Todo\";\r\nimport {faSquare, faCheckSquare} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\ninterface TodoListProps {\r\n    todos: Todo[],\r\n    changeTodo: (id: string, done: boolean) => void\r\n}\r\n\r\nclass TodoList extends React.Component<TodoListProps, {}> {\r\n    constructor(props: TodoListProps) {\r\n        super(props);\r\n        this.state = {todos: this.props.todos};\r\n    }\r\n\r\n    getTodos(done: boolean) {\r\n        const renderedTodos = this.props.todos.filter(todo => todo.done === done);\r\n        if (renderedTodos.length !== 0) {\r\n            return (\r\n                <ul>\r\n                    {renderedTodos.map((todo) => (\r\n                        <li className=\"rounded-box\" key={todo.id}\r\n                            onClick={() => this.setState(() => this.props.changeTodo(todo.id, !done))\r\n                            }>\r\n                            <FontAwesomeIcon icon={done ? faCheckSquare : faSquare}/>\r\n                            <span>{todo.label}</span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        if (!done) {\r\n            return <p>You've completed all your tasks! <span role=\"img\" aria-label=\"Congrats!\">ðŸ™Œ</span></p>\r\n        } else {\r\n            return <p>Complete your first todo to become <span className=\"text-accent\">awesome</span><span role=\"img\"\r\n                                                                                                           aria-label=\"Become awesome!\">ðŸ”¥</span>\r\n            </p>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"TodoList\">\r\n                <h1>Todo:</h1>\r\n                {this.getTodos(false)}\r\n                <h1>Done:</h1>\r\n                {this.getTodos(true)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import {v4 as uuidv4} from 'uuid';\r\n\r\nexport default class Todo {\r\n    public id: string;\r\n\r\n    constructor(public label: string, public done = false) {\r\n        this.id = uuidv4();\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './TaskInputField.scss';\r\n\r\nconst taskIsValid = (task: string) => {\r\n    return task.trim().length !== 0;\r\n}\r\n\r\nexport function InputField({onSubmit}: any) {\r\n    const {register, handleSubmit, reset} = useForm();\r\n    const submitValue = (formData: any) => {\r\n        reset();\r\n        onSubmit(formData['newTask']);\r\n    }\r\n    return (\r\n        <form className=\"newTaskInput\" onSubmit={handleSubmit(submitValue)}>\r\n                <input onBlur={() => reset()} className=\"rounded-box primary\" name=\"newTask\"\r\n                       ref={register({required: true, validate: value => taskIsValid(value)})}/>\r\n                <FontAwesomeIcon\r\n                    onClick={handleSubmit(submitValue)}\r\n                    className=\"rounded-box primary\" icon={faPlusCircle}/>\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\nimport TodoList from \"../TodoList/TodoList\";\nimport Todo from \"../Todo/Todo\";\nimport {InputField} from '../TaskInputField/TaskInputField';\nimport logo from '../logo.svg';\nimport './App.scss';\n// @ts-ignore\nimport superplaceholder from 'superplaceholder';\n\nclass App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            todos: [\n                new Todo('ðŸš— Wash car'),\n                new Todo('ðŸ’¸ Get paid'),\n                new Todo('ðŸ’» Create todo app')\n            ]\n        };\n    }\n\n    addTodo = (text: string) => {\n        console.log(text);\n        this.setState((state: any) => {\n            return {\n                todos: [...state.todos, new Todo(text)]\n            };\n        });\n    }\n\n    changeTodo = (id: string, done: boolean) => {\n        this.setState((state: any) => ({\n            todos: state.todos.map((todo: Todo) => {\n                if (todo.id === id) {\n                    todo.done = done;\n                }\n                return todo;\n            })\n        }));\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>Tasky</p>\n                </header>\n                <section>\n                    <div className=\"mainPadding\">\n                    <h2>Add a new task</h2>\n                    <InputField onSubmit={(text: string) => this.addTodo(text)}/>\n                        <TodoList todos={this.state.todos} changeTodo={this.changeTodo}/>\n                    </div>\n                </section>\n            </div>\n        );\n    }\n\n    componentDidMount(): void {\n        superplaceholder({\n            el: document.querySelector('input'),\n            sentences: ['...Fix that leak', '...Hug my cat', '...Cover my mouth when coughing ðŸ˜·', '...Go to the store', '...Update my resume'],\n            options: {\n                letterDelay: 80,\n                sentenceDelay: 850,\n                shuffle: true,\n                loop: true,\n            }\n        }).start();\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}